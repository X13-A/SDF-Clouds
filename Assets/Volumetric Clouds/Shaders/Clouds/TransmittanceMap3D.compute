#pragma kernel CSMain
#include "./CloudsLib.cginc" 

// Output
RWTexture3D<float> _TransmittanceMap;
uint3 _TransmittanceMapResolution;
float3 _TransmittanceMapCoverage;

// View
float4x4 _InvProjectionMatrix;
float4x4 _InvViewMatrix;
float3 _CameraPos;
float3 _StartPos;
float3 _LightDir;

// Shape
float3 _BoundsMin;
float3 _BoundsMax;
float3 _CloudsScale;
float _GlobalDensity;

// SDF
Texture3D<float> _ShapeSDF;
SamplerState sampler_ShapeSDF;

int3 _ShapeSDFSize;
float _ThresholdSDF;

// Lighting
float _LightMinStepSize;
float _SunLightAbsorption;

// Powder effect
float _PowderBrightness;
float _PowderIntensity;
bool _UsePowderEffect;

// Erosion
Texture3D<float> _Erosion;
SamplerState sampler_Erosion;
bool _UseErosion;

float _ErosionTextureScale;
float _ErosionWorldScale;
float3 _ErosionSpeed;
float _ErosionIntensity;

// Others
float _CustomTime;
float _OffsetNoiseIntensity;
Texture2D<float4> _OffsetNoise;
SamplerState sampler_OffsetNoise;

float3 idToWorldSpace(uint3 id)
{
    // Normalize grid indices to range [-0.5, 0.5]
    float3 normalized = ((float3) id / (float3) _TransmittanceMapResolution) - 0.5;

    // Scale normalized coordinates to the coverage area
    return normalized * _TransmittanceMapCoverage;
}

int3 posToMapID(float3 currentPos)
{
    // Normalize pos
    float3 mapIDf = currentPos;
    mapIDf /= float3(_TransmittanceMapCoverage.x, distance(_BoundsMin.y, _BoundsMax.y), _TransmittanceMapCoverage.y);
    
    // Clamp to avoid repetition ?
    return (int3) mapIDf;
}

bool isInMap(int3 mapID)
{
    if (mapID.x < 0 || (uint) mapID.x >= _TransmittanceMapResolution.x) return false;
    if (mapID.y < 0 || (uint) mapID.y >= _TransmittanceMapResolution.y) return false;
    if (mapID.z < 0 || (uint) mapID.z >= _TransmittanceMapResolution.z) return false;
    return true;
}

[numthreads(8,8,8)]
void CSMain (uint3 id : SV_DispatchThreadID) 
{
    float2 uv = float2((id.xy + float2(0.5f, 0.5f)) / (float2) _TransmittanceMapResolution.xz * 2.0f - 1.0f);
    float offset = _OffsetNoise.SampleLevel(sampler_OffsetNoise, uv, 0).r * _OffsetNoiseIntensity;

    // Convert thread ID to world space
    float3 worldSpacePos = idToWorldSpace(id);
    float3 startPos = _StartPos + worldSpacePos;

    // Initialize s_lightParams struct
    s_lightParams lightParams;
    lightParams.lightDir = -_LightDir;
    lightParams.sunLightAbsorption = _SunLightAbsorption;
    lightParams.usePowderEffect = _UsePowderEffect;
    lightParams.powderIntensity = _PowderIntensity;
    lightParams.powderBrightness = _PowderBrightness;

    // Initialize s_rayMarchParams struct
    s_rayMarchParams rayParams;
    rayParams.sampler_SDF = sampler_ShapeSDF;
    rayParams.SDF = _ShapeSDF;
    rayParams.sdfSize = _ShapeSDFSize;
    rayParams.sdfThreshold = _ThresholdSDF;
    rayParams.minStepSize = _LightMinStepSize;
    rayParams.offset = offset;

    // Initialize s_erosionParams struct
    s_erosionParams erosionParams;
    erosionParams.erosion = _Erosion;
    erosionParams.sampler_erosion = sampler_Erosion;
    erosionParams.intensity = _ErosionIntensity;
    erosionParams.worldScale = _ErosionWorldScale;
    erosionParams.textureScale = _ErosionTextureScale;
    erosionParams.speed = _ErosionSpeed;
    erosionParams.erode = _UseErosion;

    // Initialize s_cloudParams struct
    s_cloudParams cloudParams;
    cloudParams.sunLightAbsorption = _SunLightAbsorption;
    cloudParams.globalDensity = _GlobalDensity;
    cloudParams.boundsMin = _BoundsMin;
    cloudParams.boundsMax = _BoundsMax;
    cloudParams.cloudsScale = _CloudsScale;

    // Call the lightMarch_sdf function
    s_lightMarchResult res = lightMarch_sdf(startPos, rayParams, cloudParams, erosionParams, lightParams, _CustomTime);

    // Store the result in the output texture
    _TransmittanceMap[id] = res.transmittance;
}
