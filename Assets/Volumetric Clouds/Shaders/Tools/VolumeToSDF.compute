#pragma kernel CSMain

// Input 3D texture
Texture3D<float> _VolumeTexture;

// Output 3D texture (SDF)
RWTexture3D<float> _SDFTexture;

// Texture size
int3 _TextureSize;

// Function to calculate the distance from a voxel to the nearest surface voxel
float calculateDistance(int3 pos)
{
    float3 fPos = float3(pos);
    float minDistance = float(_TextureSize.x); // Initialize with a large value
    bool insideVolume = _VolumeTexture[pos] > 0; // Check if the current position is inside the volume

    for (int z = 0; z < _TextureSize.z; z++)
    {
        for (int y = 0; y < _TextureSize.y; y++)
        {
            for (int x = 0; x < _TextureSize.x; x++)
            {
                int3 samplePos = int3(x, y, z);
                float value = _VolumeTexture[samplePos];

                if (insideVolume)
                {
                    // When inside the volume, look for the nearest edge (transition from positive to 0)
                    if (value <= 0)
                    {
                        float dist = distance(samplePos, fPos);

                        if (dist < minDistance)
                        {
                            minDistance = dist;
                        }
                    }
                }
                else
                {
                    // When outside the volume, look for the nearest positive voxel
                    if (value > 0)
                    {
                        float dist = distance(samplePos, fPos);

                        if (dist < minDistance)
                        {
                            minDistance = dist;
                        }
                    }
                }
            }
        }
    }

    // If inside the volume, return a negative distance
    return insideVolume ? -minDistance : minDistance;
}

[numthreads(8, 8, 8)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    // Get the position of the current voxel
    int3 pos = int3(id);

    // Get the value of the current voxel
    float value = _VolumeTexture[pos];

    // Calculate the signed distance
    float distance = calculateDistance(pos);

    _SDFTexture[pos] = distance;
}