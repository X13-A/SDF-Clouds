#pragma kernel CSMain
#include "./CloudsLib.cginc" 

// Output
RWTexture3D<float> _TransmittanceMap;
uint3 _TransmittanceMapResolution;
float3 _TransmittanceMapCoverage;

// View
float3 _StartPos;
float3 _LightDir;

// Shape
float3 _BoundsMin;
float3 _BoundsMax;
float3 _SDFTextureScale;
float _GlobalDensity;

// SDF
Texture3D<float> _ShapeSDF;
SamplerState sampler_ShapeSDF;

int3 _ShapeSDFSize;
float _ThresholdSDF;

// Lighting
float _LightMinStepSize;
float _SunLightAbsorption;
bool _UseSun;

// Powder effect
float _PowderBrightness;
float _PowderIntensity;
bool _UsePowderEffect;

// Erosion
Texture3D<float> _Erosion;
SamplerState sampler_Erosion;
bool _UseErosion_sun;
bool _UseErosion_AO;

float _ErosionTextureScale;
float _ErosionWorldScale;
float3 _ErosionSpeed;
float _ErosionIntensity;

// AO
bool _UseAO;
float _AOintensity;
float _AOoffset;

// Others
float _CustomTime;

// Dev: point light
bool _UsePointLight;
float3 _PointLightPos;

float3 idToWorldSpace(uint3 id)
{
    // Normalize grid indices to range [-0.5, 0.5]
    float3 normalized = ((float3) id / (float3) _TransmittanceMapResolution) - 0.5;

    // Scale normalized coordinates to the coverage area
    return normalized * _TransmittanceMapCoverage;
}

int3 posToMapID(float3 currentPos)
{
    // Normalize pos
    float3 mapIDf = currentPos;
    mapIDf /= float3(_TransmittanceMapCoverage.x, distance(_BoundsMin.y, _BoundsMax.y), _TransmittanceMapCoverage.y);
    
    // Clamp to avoid repetition ?
    return (int3) mapIDf;
}

bool isInMap(int3 mapID)
{
    if (mapID.x < 0 || (uint) mapID.x >= _TransmittanceMapResolution.x) return false;
    if (mapID.y < 0 || (uint) mapID.y >= _TransmittanceMapResolution.y) return false;
    if (mapID.z < 0 || (uint) mapID.z >= _TransmittanceMapResolution.z) return false;
    return true;
}

float calculateAO(uint3 currentID, s_rayMarchParams rayParams, s_cloudParams cloudParams, s_erosionParams erosionParams)
{
    float totalOcclusion = 0.0;
    int validSamples = 0;
    float3 currentPos = idToWorldSpace(currentID) + _StartPos;
    
    // Sample all neighbors
    int samplesPerSide = 3;
    float offset = _AOoffset / samplesPerSide;
    
    for (int x = -samplesPerSide; x <= samplesPerSide; x++)
    {
        for (int y = -samplesPerSide; y <= samplesPerSide; y++)
        {
            for (int z = -samplesPerSide; z <= samplesPerSide; z++)
            {
                // Skip center voxel
                if (x == 0 && y == 0 && z == 0)
                {
                    continue;
                }
                
                float3 neighbor = currentPos + float3(x, y, z) * offset;
                float neighborDensity = 0;
                
                // Check if sample is valid
                if (isInBox_bounds(neighbor, _BoundsMin, _BoundsMax, false, true, false))
                {
                    neighborDensity = sampleDensity(neighbor, cloudParams, erosionParams, rayParams, _CustomTime);
                }
                
                totalOcclusion += neighborDensity;
                validSamples++;
            }
        }
    }
    
    if (validSamples == 0)
    {
        return 1.0;
    }
    
    // Calculate average occlusion
    float avgOcclusion = totalOcclusion / (float) validSamples;
    
    // Convert to AO factor (higher density = more occlusion = darker)
    float aoFactor = 1.0 - saturate(avgOcclusion * _AOintensity);
    
    return aoFactor;
}

[numthreads(8,8,8)]
void CSMain (uint3 id : SV_DispatchThreadID) 
{
    // Convert thread ID to world space
    float3 worldSpacePos = idToWorldSpace(id);
    float3 startPos = _StartPos + worldSpacePos;

    // Initialize s_lightParams struct
    s_lightParams lightParams;
    lightParams.lightDir = normalize(-_LightDir);
    lightParams.sunLightAbsorption = _SunLightAbsorption;
    lightParams.usePowderEffect = _UsePowderEffect;
    lightParams.powderIntensity = _PowderIntensity;
    lightParams.powderBrightness = _PowderBrightness;

    // Initialize s_rayMarchParams struct
    s_rayMarchParams rayParams;
    rayParams.sampler_SDF = sampler_ShapeSDF;
    rayParams.SDF = _ShapeSDF;
    rayParams.sdfSize = _ShapeSDFSize;
    rayParams.sdfThreshold = _ThresholdSDF;
    rayParams.minStepSize = _LightMinStepSize;
    rayParams.offset = 0;

    // Initialize s_erosionParams struct
    s_erosionParams erosionParams;
    erosionParams.erosion = _Erosion;
    erosionParams.sampler_erosion = sampler_Erosion;
    erosionParams.intensity = _ErosionIntensity;
    erosionParams.worldScale = _ErosionWorldScale;
    erosionParams.textureScale = _ErosionTextureScale;
    erosionParams.speed = _ErosionSpeed;
    erosionParams.erode = _UseErosion_sun;

    // Initialize s_cloudParams struct
    s_cloudParams cloudParams;
    cloudParams.sunLightAbsorption = _SunLightAbsorption;
    cloudParams.globalDensity = _GlobalDensity;
    cloudParams.boundsMin = _BoundsMin;
    cloudParams.boundsMax = _BoundsMax;
    cloudParams.cloudsScale = _SDFTextureScale;

    // Call the lightMarch_sdf function
    s_lightMarchResult res_sun = lightMarch_sdf(startPos, rayParams, cloudParams, erosionParams, lightParams, _CustomTime);
    
    // Calculate Ambiant occlusion
    float aoFactor = 1;
    if (_UseAO)
    {
        erosionParams.erode = _UseErosion_AO;
        aoFactor = calculateAO(id, rayParams, cloudParams, erosionParams);
    }
    
    // Store the result in the output texture
    _TransmittanceMap[id] = 1;
    
    if (_UseAO)
    {
        _TransmittanceMap[id] -= pow(1 - aoFactor, 2);
        //_TransmittanceMap[id] -= 1 - pow(aoFactor, 2);
    }
    if (_UseSun)
    {
        _TransmittanceMap[id] *= res_sun.transmittance;    
    }

    
    if (_UsePointLight)
    {
        lightParams.lightDir = normalize(_PointLightPos - startPos);
        lightParams.sunLightAbsorption = 0.2;
        cloudParams.globalDensity = 0.015;

        float pointLightDist = distance(startPos, _PointLightPos);
     
        s_lightMarchResult res_point = lightMarch_sdf(startPos, rayParams, cloudParams, erosionParams, lightParams, _CustomTime, pointLightDist);
        _TransmittanceMap[id] += res_point.transmittance;
    }
} 
 